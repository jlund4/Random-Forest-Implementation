olive = olive[,-1]
inTrain = createDataPartition(olive$Case, p = 1/2, list = FALSE)
training = olive[ inTrain,]
modFit <- train(Area~.,method = "rpart", data = training)
newdata = as.data.frame(t(colMeans(olive)))
predict(modFit, newdata)
data(olive)
olive = olive[,-1]
inTrain = createDataPartition(olive$Case, p = 1/2, list = FALSE)
training = olive[ inTrain,]
modFit <- train(Area~.,method = "rpart", data = training)
newdata = as.data.frame(t(colMeans(olive)))
predict(modFit, newdata)
inTrain = createDataPartition(olive$Area, p = 1/2, list = FALSE)
training = olive[ inTrain,]
modFit <- train(Area~.,method = "rpart", data = training)
newdata = as.data.frame(t(colMeans(olive)))
predict(modFit, newdata)
data(olive)
olive = olive[,-1]
modFit <- train(Area~.,method = "tree", data = olive)
newdata = as.data.frame(t(colMeans(olive)))
predict(modFit, newdata)
install.packages("tree")
?tree
??tree
package(tree)
library(tree)
?tree
modFit <- tree(Area~., data = olive)
predict(modFit, newdata)
library(ElemStatLearn)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
str(testSA)
modFit <- train(chd~age + alcohol + obesity + tobacc + typea +ldl, method = "glm", family="binomial" data = training)
modFit <- glm(chd~age + alcohol + obesity + tobacc + typea +ldl, family="binomial" data = training)
modFit <- glm(chd~age + alcohol + obesity + tobacc + typea +ldl, family=binomial data = training)
modFit <- glm(chd~age + alcohol + obesity + tobacc + typea +ldl, family=binomial() data = training)
help(glm)
modFit <- glm(chd~age + alcohol + obesity + tobacco + typea +ldl, family=binomial(), data = training)
modFit <- glm(chd~age + alcohol + obesity + tobacco + typea +ldl, family=binomial(), data = trainSA)
prediction <- predict(modFit, testSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missclass
missClass
str(testSA)
misses <- missClass(testSA, prediction)
misses
misses <- missClass(testSA$chd, prediction)
misses
misses <- missClass(trainSA$chd, prediction)
misses
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
modFit <- glm(chd~age + alcohol + obesity + tobacco + typea +ldl, family=binomial(), data = trainSA)
testpred <- predict(modFit, testSA)
trainpred <- predict(modFit, trainSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
testmisses <- missClass(testSA$chd, prediction)
trainmisses <- missClass(trainSA$chd, prediction)
testmisses <- missClass(testSA$chd, testpred)
trainmisses <- missClass(trainSA$chd, trainpred)
?SAheart
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
modFit <-
modFit <- train(chd~age + alcohol + obesity + tobacco + typea +ldl, method = "glm" family=binomial, data = trainSA)
testpred <- predict(modFit, testSA)
trainpred <- predict(modFit, trainSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
testmisses <- missClass(testSA$chd, testpred)
trainmisses <- missClass(trainSA$chd, trainpred)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
modFit <- train(chd~age + alcohol + obesity + tobacco + typea +ldl, method = "glm" family=binomial, data = trainSA)
modFit <- train(chd~age + alcohol + obesity + tobacco + typea +ldl, method = "glm", family=binomial, data = trainSA)
testpred <- predict(modFit, testSA)
trainpred <- predict(modFit, trainSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
testmisses <- missClass(testSA$chd, testpred)
trainmisses <- missClass(trainSA$chd, trainpred)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
?data
str(vowel.train)
str(vowel.test)
?train
for data in (vowel.test, vowel.train){
data$y <- factor(data$y)
}
for data in (vowel.test, vowel.train){
data$y <- factor(data$y)
}
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
for data in (vowel.test, vowel.train){
data$y <- factor(data$y)
}
for data in vowel.test, vowel.train{
data$y <- factor(data$y)
}
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
modFit <- train(y~., method = "rf", data = vowel.train)
modFit <- train(y~., method = "rf", data = vowel.train)
modFit
importance(modFit)
?varlmp
?varlmp()
varImp(modFit)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
modFit <- train(y~., method = "rf", data = vowel.train)
varImp(modFit)
?split
library(AppliedPredictiveModeling)
data(segmentationOriginal)
adData = data.frame(segmentationOriginal)
library(caret)
split(data.frame(adData), adData$case)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
adData = data.frame(segmentationOriginal)
library(caret)
split(data.frame(adData), adData$Case)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
testing <- segmentationOriginal[segmentationOriginal$Case == "Test"]
training <- segmentationOriginal[segmentationOriginal$Case == "Train"]
set.seed(125)
modFit <- train(Class~., method = "rpart", data = training)
## Fancy Tree
fancyRpartPlot(modFit$finalModel)
testing <- segmentationOriginal[segmentationOriginal$Case == "Test",]
training <- segmentationOriginal[segmentationOriginal$Case == "Train",]
set.seed(125)
modFit <- train(Class~., method = "rpart", data = training)
## Fancy Tree
fancyRpartPlot(modFit$finalModel)
model$modFit
mmodFit$finalModel
modFit$finalModel
randomForest?
?
print
?randomForest
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
modFit <- randomForest(y~., data = vowel.train)
varImp(modFit)
getwd()
setwd("Desktop")
getwd()
setwd("Machine Learning")
getwd()
setwd("project)")
setwd("project")
getwd()
ls
dir()
training = read.csv("pml-training.csv")
colnames("training")
colnames(training)
summary(training)
modFit <- randomForest(classe~., data = training)
varImp(modFit)
library(ElemStatLearn)
modFit <- randomForest(classe~., data = training)
varImp(modFit)
library(AppliedPredictiveModeling)
modFit <- randomForest(classe~., data = training)
varImp(modFit)
library(randomForest)
modFit <- randomForest(classe~., data = training)
varImp(modFit)
str(training)
varImp(modFit)
library(ElemStatLearn)
library(AppliedPredictiveModeling)
library(caret)
modFit <- randomForest(classe~., data = training)
varImp(modFit)
modFit <- train(classe~., method = "rpart", data = training)
preProc <- preProcess(training[-160], method = "pca", thresh=.80)
summary(training)
str(training)
header(training)
head(training, n=5)
sin_outcome <- training[,1:159]
str(sin_outcome)
cor(training)
typeof(ls())
ls()
typeof(sin_outcome)
as.numeric(training)
as.numeric(training[1])
summary(training)
training <- sapply(training, is.numeric)
training
training[, nums]
training = read.csv("pml-training.csv")
nums <- sapply(training, is.numeric)
nums
training[,nums]
numeric <- training[,nums]
cor(numeric)
summary(numeric)
y <- training[,160]
y <- as.numeric(y)
summary(y)
str(y)
numeric$y <- y
summary(numeric)
preProc <- preProcess(numeric[-124], method = "pca", thresh=.80)
modFit <- randomForest(y~., data = numeric)
varImp(modFit)
nrows <- sapply( csvfiles, function(f) nrow(complete.cases(numeric)
)
)
complete.cases(numeric)
z <- complete.cases(numeric)
summary(z)
modFit <- train(y~., method = "rpart", data = numeric)
varImp(modFit)
summary(numeric)
print modFit
varIMP(modFit)
varImp(modFit)
variables <- c("y", "var_roll_belt", "stddev_roll_belt", "var_total_accel_belt", "amplitude_pitch_belt")
newdata <- numeric[variables]
modFit <- randomForest(classe~., data = newdata)
modFit <- randomForest(y~., data = newdata)
varImp(modFit)
head(newdata)
variables <- c("classe", "var_roll_belt", "stddev_roll_belt", "var_total_accel_belt", "amplitude_pitch_belt")
newdata <- training[variables]
modFit <- randomForest(y~., data = newdata)
varImp(modFit)
str(newdata)
head(newdta)
head(newdata)
preProc <- preProcess(newdata[-1], method = "pca", thresh=.80)
preProc
?preProcess
library(ElemStatLearn)
library(AppliedPredictiveModeling)
library(caret)
setwd("/Users/jlund4/Desktop/Machine Learning/Project")
training = read.csv("pml-training.csv")
modFit <- randomForest(classe~., data = training)
modFit <- train(Class~., method = "rpart", data = training)
modFit <- train(classe~., method = "rpart", data = training)
modFit <- train(classe~., method = "rpart", data = training)
modFit <- train(classe~., method = "rpart", data = training)
head(training, n=50)
colnames(training)
summary(training)
small <- training[training$user_name== "adelmo"]
small <- training[training$user_name== "adelmo",]
modFit <- train(classe~., method = "rpart", data = small)
small
head(small, n = 20)
colnames(trainig)
colnames(training)
training$X
summary(training$X)
head(training[1:10])
head(training[1:30])
head(training[1:10], N = 40)
head(training[1:10], n = 40)
head(training[1:10], n = 55)
head(training[1:10], n = 100)
head(training[2:9,160], n = 100)
head(training[2,160], n = 100)
head(training[160], n = 100)
head(training[160], n = 200)
head(training[160], n = 300)
head(training[160,4], n = 300)
head(training[160,], n = 300)
head(training[,160], n = 300)
head(training[,(1:10,160)], n = 300)
head(training[(1:10,160)], n = 300)
training[1:10]
head(training[c(1:10,160)], n = 300)
head(training[c(1:10,160)], n = 5000)
plot(classe, data = training)
plot(training$classe)
plot(training$classe, training$X)
plot(training$classe, training$user_name)
plot(training$class, user_name == "adelmo")
plot(training$class, training$user_name == "adelmo")
plot(training$classe, training$user_name == "adelmo")
plot(training$classe, xlab =  training$user_name == "adelmo")
plot(small$classe)
head(small, n=1)
lapply[small, sum(is.na(x))]
lapply[small, sum(is.na(small))]
training[!complete.cases(training),]
complete.cases(training)
count(complete.cases(training))
table(complete.cases(training))
complete <- training[complete.cases(training)==TRUE]
complete <- complete.cases(training)
complete
drop complete
remove complete
testing = read.csv("pml-testing.csv")
colnames(testing)
testing
colnames(testing)[colSums(is.na(testing)) > 0]
variables <- colnames(testing)[colSums(is.na(testing)) > 0]
subset <- training[-colnames]
subset <- training[!colnames]
subset <- training[-variables]
subset <- training[!variables]
subset <- training[variables]
badvariables <- colnames(testing)[colSums(is.na(testing)) > 0]
goodvariables <- colnames(testing)-colnames(badvariables)
clear subset
clear(subset)
delete(subset)
remove(subset)
remove(small)
remove(variables)
goodvariables <- colnames(testing)[colSums(is.na(testing)) == 0]
useful <- training[goodvariables]
good <- colnames(testing)[colSums(is.na(testing)) == 0]
subset <- training[giid]
subset <- training[good]
str(good)
c(good)
subset <- training[c(good)]
x <- c(good)
good
dim(good)
good <- good
remove(badvariables)
remove(complete)
remove(goodvariables)
remove(x)
x <- c("X",                    "user_name"          ,  "raw_timestamp_part_1",
"raw_timestamp_part_2",     "cvtd_timestamp"   ,    "new_window"        ,
"num_window"           ,"roll_belt"          ,  "pitch_belt"         ,
"yaw_belt"             ,"total_accel_belt"    , "gyros_belt_x"       ,
"gyros_belt_y"    ,     "gyros_belt_z"      ,   "accel_belt_x"       ,
"accel_belt_y"     ,    "accel_belt_z"      ,   "magnet_belt_x"      ,
"magnet_belt_y"     ,   "magnet_belt_z"     ,   "roll_arm"           ,
"pitch_arm"         ,   "yaw_arm"            ,  "total_accel_arm"    ,
"gyros_arm_x"      ,    "gyros_arm_y"       ,   "gyros_arm_z"       ,
"accel_arm_x"      ,    "accel_arm_y"       ,   "accel_arm_z"       ,
"magnet_arm_x"     ,    "magnet_arm_y"      ,   "magnet_arm_z"      ,
"roll_dumbbell"    ,    "pitch_dumbbell"    ,   "yaw_dumbbell"      ,
"total_accel_dumbbell", "gyros_dumbbell_x"  ,   "gyros_dumbbell_y"  ,
"gyros_dumbbell_z"    , "accel_dumbbell_x"  ,   "accel_dumbbell_y"  ,
"accel_dumbbell_z"    , "magnet_dumbbell_x" ,   "magnet_dumbbell_y" ,
"magnet_dumbbell_z"   , "roll_forearm"      ,   "pitch_forearm"     ,
"yaw_forearm"         , "total_accel_forearm" , "gyros_forearm_x"   ,
"gyros_forearm_y"     , "gyros_forearm_z"    ,  "accel_forearm_x"   ,
"accel_forearm_y"     , "accel_forearm_z"    ,  "magnet_forearm_x" ,
"magnet_forearm_y"    , "magnet_forearm_z"   ,  "problem_id"  )
subset <- training[x]
x <- trainint[c("X",                    "user_name"          ,  "raw_timestamp_part_1",
"raw_timestamp_part_2",     "cvtd_timestamp"   ,    "new_window"        ,
"num_window"           ,"roll_belt"          ,  "pitch_belt"         ,
"yaw_belt"             ,"total_accel_belt"    , "gyros_belt_x"       ,
"gyros_belt_y"    ,     "gyros_belt_z"      ,   "accel_belt_x"       ,
"accel_belt_y"     ,    "accel_belt_z"      ,   "magnet_belt_x"      ,
"magnet_belt_y"     ,   "magnet_belt_z"     ,   "roll_arm"           ,
"pitch_arm"         ,   "yaw_arm"            ,  "total_accel_arm"    ,
"gyros_arm_x"      ,    "gyros_arm_y"       ,   "gyros_arm_z"       ,
"accel_arm_x"      ,    "accel_arm_y"       ,   "accel_arm_z"       ,
"magnet_arm_x"     ,    "magnet_arm_y"      ,   "magnet_arm_z"      ,
"roll_dumbbell"    ,    "pitch_dumbbell"    ,   "yaw_dumbbell"      ,
"total_accel_dumbbell", "gyros_dumbbell_x"  ,   "gyros_dumbbell_y"  ,
"gyros_dumbbell_z"    , "accel_dumbbell_x"  ,   "accel_dumbbell_y"  ,
"accel_dumbbell_z"    , "magnet_dumbbell_x" ,   "magnet_dumbbell_y" ,
"magnet_dumbbell_z"   , "roll_forearm"      ,   "pitch_forearm"     ,
"yaw_forearm"         , "total_accel_forearm" , "gyros_forearm_x"   ,
"gyros_forearm_y"     , "gyros_forearm_z"    ,  "accel_forearm_x"   ,
"accel_forearm_y"     , "accel_forearm_z"    ,  "magnet_forearm_x" ,
"magnet_forearm_y"    , "magnet_forearm_z"   ,  "problem_id"  )]
x <- training[c("X",                    "user_name"          ,  "raw_timestamp_part_1",
"raw_timestamp_part_2",     "cvtd_timestamp"   ,    "new_window"        ,
"num_window"           ,"roll_belt"          ,  "pitch_belt"         ,
"yaw_belt"             ,"total_accel_belt"    , "gyros_belt_x"       ,
"gyros_belt_y"    ,     "gyros_belt_z"      ,   "accel_belt_x"       ,
"accel_belt_y"     ,    "accel_belt_z"      ,   "magnet_belt_x"      ,
"magnet_belt_y"     ,   "magnet_belt_z"     ,   "roll_arm"           ,
"pitch_arm"         ,   "yaw_arm"            ,  "total_accel_arm"    ,
"gyros_arm_x"      ,    "gyros_arm_y"       ,   "gyros_arm_z"       ,
"accel_arm_x"      ,    "accel_arm_y"       ,   "accel_arm_z"       ,
"magnet_arm_x"     ,    "magnet_arm_y"      ,   "magnet_arm_z"      ,
"roll_dumbbell"    ,    "pitch_dumbbell"    ,   "yaw_dumbbell"      ,
"total_accel_dumbbell", "gyros_dumbbell_x"  ,   "gyros_dumbbell_y"  ,
"gyros_dumbbell_z"    , "accel_dumbbell_x"  ,   "accel_dumbbell_y"  ,
"accel_dumbbell_z"    , "magnet_dumbbell_x" ,   "magnet_dumbbell_y" ,
"magnet_dumbbell_z"   , "roll_forearm"      ,   "pitch_forearm"     ,
"yaw_forearm"         , "total_accel_forearm" , "gyros_forearm_x"   ,
"gyros_forearm_y"     , "gyros_forearm_z"    ,  "accel_forearm_x"   ,
"accel_forearm_y"     , "accel_forearm_z"    ,  "magnet_forearm_x" ,
"magnet_forearm_y"    , "magnet_forearm_z"   ,  "problem_id"  )]
x <- training[c("X",                    "user_name"          ,  "raw_timestamp_part_1",
"raw_timestamp_part_2",     "cvtd_timestamp"   ,    "new_window"        ,
"num_window"           ,"roll_belt"          ,  "pitch_belt"         ,
"yaw_belt"             ,"total_accel_belt"    , "gyros_belt_x"       ,
"gyros_belt_y"    ,     "gyros_belt_z"      ,   "accel_belt_x"       ,
"accel_belt_y"     ,    "accel_belt_z"      ,   "magnet_belt_x"      ,
"magnet_belt_y"     ,   "magnet_belt_z"     ,   "roll_arm"            )]
x <- training[c("X",                    "user_name"          ,  "raw_timestamp_part_1",
"raw_timestamp_part_2",     "cvtd_timestamp"   ,    "new_window"        ,
"num_window"           ,"roll_belt"          ,  "pitch_belt"         ,
"yaw_belt"             ,"total_accel_belt"    , "gyros_belt_x"       ,
"gyros_belt_y"    ,     "gyros_belt_z"      ,   "accel_belt_x"       ,
"accel_belt_y"     ,    "accel_belt_z"      ,   "magnet_belt_x"      ,
"magnet_belt_y"     ,   "magnet_belt_z"     ,   "roll_arm"           ,
"pitch_arm"         ,   "yaw_arm"            ,  "total_accel_arm"    ,
"gyros_arm_x"      ,    "gyros_arm_y"       ,   "gyros_arm_z"       ,
"accel_arm_x"      ,    "accel_arm_y"       ,   "accel_arm_z"       ,
"magnet_arm_x"     ,    "magnet_arm_y"      ,   "magnet_arm_z"      ,
"roll_dumbbell"    ,    "pitch_dumbbell"    ,   "yaw_dumbbell"      ,
"total_accel_dumbbell", "gyros_dumbbell_x"  ,   "gyros_dumbbell_y"  ,
"gyros_dumbbell_z"    , "accel_dumbbell_x"  ,   "accel_dumbbell_y"  ,
"accel_dumbbell_z"    , "magnet_dumbbell_x" ,   "magnet_dumbbell_y" ,
"magnet_dumbbell_z"   , "roll_forearm"      ,   "pitch_forearm"     ,
"yaw_forearm"         , "total_accel_forearm" , "gyros_forearm_x"   ,
"gyros_forearm_y"     , "gyros_forearm_z"    ,  "accel_forearm_x"   ,
"accel_forearm_y"     , "accel_forearm_z"    ,  "magnet_forearm_x"  )]
x <- training[c("X",                    "user_name"          ,  "raw_timestamp_part_1",
"raw_timestamp_part_2",     "cvtd_timestamp"   ,    "new_window"        ,
"num_window"           ,"roll_belt"          ,  "pitch_belt"         ,
"yaw_belt"             ,"total_accel_belt"    , "gyros_belt_x"       ,
"gyros_belt_y"    ,     "gyros_belt_z"      ,   "accel_belt_x"       ,
"accel_belt_y"     ,    "accel_belt_z"      ,   "magnet_belt_x"      ,
"magnet_belt_y"     ,   "magnet_belt_z"     ,   "roll_arm"           ,
"pitch_arm"         ,   "yaw_arm"            ,  "total_accel_arm"    ,
"gyros_arm_x"      ,    "gyros_arm_y"       ,   "gyros_arm_z"       ,
"accel_arm_x"      ,    "accel_arm_y"       ,   "accel_arm_z"       ,
"magnet_arm_x"     ,    "magnet_arm_y"      ,   "magnet_arm_z"      ,
"roll_dumbbell"    ,    "pitch_dumbbell"    ,   "yaw_dumbbell"      ,
"total_accel_dumbbell", "gyros_dumbbell_x"  ,   "gyros_dumbbell_y"  ,
"gyros_dumbbell_z"    , "accel_dumbbell_x"  ,   "accel_dumbbell_y"  ,
"accel_dumbbell_z"    , "magnet_dumbbell_x" ,   "magnet_dumbbell_y" ,
"magnet_dumbbell_z"   , "roll_forearm"      ,   "pitch_forearm"     ,
"yaw_forearm"         , "total_accel_forearm" , "gyros_forearm_x"   ,
"gyros_forearm_y"     , "gyros_forearm_z"    ,  "accel_forearm_x"   ,
"accel_forearm_y"     , "accel_forearm_z"    ,  "magnet_forearm_x" ,
"magnet_forearm_y"    , "magnet_forearm_z"    )]
modFit <- randomForest(classe~., data = training)
modFit <- train(classe~., method = "rpart", data = training)
modFit <- randomForest(classe~., data = x)
x <- training[c("X",                    "user_name"          ,  "raw_timestamp_part_1",
"raw_timestamp_part_2",     "cvtd_timestamp"   ,    "new_window"        ,
"num_window"           ,"roll_belt"          ,  "pitch_belt"         ,
"yaw_belt"             ,"total_accel_belt"    , "gyros_belt_x"       ,
"gyros_belt_y"    ,     "gyros_belt_z"      ,   "accel_belt_x"       ,
"accel_belt_y"     ,    "accel_belt_z"      ,   "magnet_belt_x"      ,
"magnet_belt_y"     ,   "magnet_belt_z"     ,   "roll_arm"           ,
"pitch_arm"         ,   "yaw_arm"            ,  "total_accel_arm"    ,
"gyros_arm_x"      ,    "gyros_arm_y"       ,   "gyros_arm_z"       ,
"accel_arm_x"      ,    "accel_arm_y"       ,   "accel_arm_z"       ,
"magnet_arm_x"     ,    "magnet_arm_y"      ,   "magnet_arm_z"      ,
"roll_dumbbell"    ,    "pitch_dumbbell"    ,   "yaw_dumbbell"      ,
"total_accel_dumbbell", "gyros_dumbbell_x"  ,   "gyros_dumbbell_y"  ,
"gyros_dumbbell_z"    , "accel_dumbbell_x"  ,   "accel_dumbbell_y"  ,
"accel_dumbbell_z"    , "magnet_dumbbell_x" ,   "magnet_dumbbell_y" ,
"magnet_dumbbell_z"   , "roll_forearm"      ,   "pitch_forearm"     ,
"yaw_forearm"         , "total_accel_forearm" , "gyros_forearm_x"   ,
"gyros_forearm_y"     , "gyros_forearm_z"    ,  "accel_forearm_x"   ,
"accel_forearm_y"     , "accel_forearm_z"    ,  "magnet_forearm_x" ,
"magnet_forearm_y"    , "magnet_forearm_z", "classe"    )]
modFit <- randomForest(classe~., data = x)
varImp(modFit)
plot(x$X, x$classe)
subset <- x[2:60]
modFit <- randomForest(classe~., data = subset)
varImp(modFit)
testpred <- predict(modFit, testing)
